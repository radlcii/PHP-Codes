<!--
    This document is one of a pair written by Robert De La Cruz II
    This code is not optimized and was never intended to for use in real applications.
    It's purpose is to provide a simple search form that allows a user to query a database filled with various media files,
        In doing so it provided a structure to learn how to use MySQL statements through PHP.  
    It is the "backside of the front end" code that proves the database was designed in a usable way.  
    The web page generated by this file should only be able to query the database, not update or change it.

    The database is created by a PHP file system iterator that simply takes everything in the directories starting from 
        a folder below the sight's root (because of permission issues) and recursively iterate down the file system
        while loading some media and web file types into the database.  As of writing this I doubt this is feasible (allowed)
        on a server device not owned or operated by me.
    The "website" setup has an index page in the root directory, but this file and its DB builder mate were required by the 
        testing system to be one folder below the root.

    The database used was a MySQL database, verification done on MySQL Workbench
    Microsoft's IIS software in Windows 10 was used to simulate a server to test this code.
        The database and server were both running from the same machine when testing this code.
        It was run successfully on a local network, successfully generating pages on several devices.
        The code was only tested in Mozilla Firefox, but should run in Internet Explorer and Microsoft Edge as well
    
    General Database Design:
        There is 1 table per general file type, e.g. JPGs and PNGs appear in the same IMAGES table, video files in another table
    
        Files are loaded into the database by their relative path, file extension and file name which are parsed from the path. 
            (Only the path/URL is really needed, the rest is arguably wasteful)
        
        Assumption:  Because this was developed on a local network using IIS to act as the server software:
            The relative path on the server machine will correspond to the address bar in a web browser

        Assumption:  Any file with a thumbnail will have the same file name, save for the file extension.  This thumbnail 
            path is stored in each row.
        
        Image thumbnailURLs are identical to their own fileURL 
            This is unnecessary and a touch wasteful as implemented, but could potentially save initail load times if a smaller 
                version of the original image is used as the thumbnail.
-->
<html>

<head>
    <meta charset="UTF-8">
    <meta name="keywords" content="">
    <link rel="stylesheet" href="/aa-TestPageFilterSortStyles.css">     <!-- Stylesheet path goes here -->
    <link rel="icon" href="data:,">
    <title> DIRECTORY_SEARCHER </title>
</head>

<body>
    <h1 id="theTop">Directory Searcher Page</h1>
    <a href="/"> Back to Index </a>     <!-- Links back to the root -->
    <br>
    <a href="aa-Scan-And-Build-EVERYTHING.php"> Repair/Rebuild Database </a>    <!-- Link to the file that generates the DB that this page uses -->
    <br><br>

    <!--
        Form to make MySQL queries with
        It is wrapped inside a container div to center it on the screen with everything else.
    -->
    <div style="display:inline-block;">
        <form method="post" >
            <table style="text-align:center;" >
                <tr>
                    <td>
                        <label for="searchExtensions">Extension</label>
                        <br>
                        <input type="text" name="searchExtensions" >
                    </td>
                    <td>
                        <label for="sendForm"></label>
                        <br>
                        <input type="submit" >
                    <td>
                </tr>
            </table>
        </form>
    </div>
    <br>

    <!-- An element filtering input -->
    <input type="text" id="myInput" onkeyup="mySearch()" placeholder="Filter by tags">
    <br>

    <!-- Adds a "back to top" button that follows in the bottom corner of the screen-->
    <button onclick="topFunction()" id="linkToTop" title="Go to top">Top</button> 
    <!--
    ################################################################################################
    ################################     Start of PHP functions     ################################
    ################################################################################################
    -->

    <?php
        /* Error reporting code, delete the # at the start of the line to activate */
        #error_reporting(E_ALL); ini_set('display_errors', 1);

        $db_name = "PHP_TEST_DB";       /* Your database name here */

        $conn = connectSQL($db_name);   /* Opens the MySQL connection */

        /* Takes the inputs from the form and put them into an array to be sent to the SQL query function
            Originally designed to have more than one query field available, the limited scope of the test databases
            and the ability to filter elements rendered this mostly moot */
        $sqlParts = [];
        if (!empty($_POST['searchExtensions'])) { $sqlParts[] = "fileExt LIKE '" . $_POST['searchExtensions'] . "'"; }
        else { queryWithAttributes($conn, $db_name, $sqlParts); }

        closeSQL($conn); /* Closes the MySQL connection. This step should be the last thing the server does  */
    ?>

    <!-- 
        This is not the best query in the world.  It gathers all the table names then uses them as a variable to make queries. 
        Every individual result is then processed and sent to a method that delegates them to other methods by their extension
        The Results are all put into an HTML table such that a javascript function can search through them.
    -->
    <?php function queryWithAttributes($conn, $db_name, $sqlParts) {
        echo "<table id=\"myTable\" >";
        
        $result = $conn->query("show tables");
        foreach ($result as $table) {
            $table = basename(implode("/", $table));
            $sql = "SELECT * FROM `{$table}` WHERE " . implode(' Or ', $sqlParts) .";";
            $stmt = mysqli_stmt_init($conn);
            if (!mysqli_stmt_prepare($stmt, $sql)) {
                /*  This page always auto-submits an empty form when loaded because of the html form.
                    The error message display is commented out to prevent an erronious error from showing on page load. */
                #echo $sql . "<br>SQL statement failed";
            } else {
                @mysqli_stmt_bind_param($stmt, str_repeat('s', count($sqlParts)), ...array_values($sqlParts));
                mysqli_stmt_execute($stmt);
                $result = mysqli_stmt_get_result($stmt);

                while ($row = mysqli_fetch_assoc($result)) {
                    if (!empty($_POST['searchExtensions'])) {
                        checkFileExt($conn, $db_name, $row, $_POST['searchExtensions']);
                    }
                    else{
                        checkFileExt($conn, $db_name, $row, $row['fileExt']);
                    }
                }
            }
        }
        echo "</table>";
    }?>

    <!--
        Literally just an elseif chain that sends the file info to sub methods that echo some basic HTML markup to display.
        This list should be easy to expand, file types were kept to a minimum for demonstrative purposes 
    -->
    <?php function checkFileExt($conn, $db_name, $row, $type) {
        if (($type == "gif" || $type == "jpg" || $type == "png") && $type == $row['fileExt']) {
            buildImageLink($row['fileTags'], $row['fileURL'], $row['fileTitle'], $row['fileExt'], $row['thumbnailURL']);
        } elseif ($type == "mp4" && $type == $row['fileExt']) {
            buildTableRows($row['fileTags'], $row['fileURL'], $row['fileTitle'], $row['fileExt'], $row['thumbnailURL']);
        } elseif ($type == "mp3" && $type == $row['fileExt']) {
            buildTableRows($row['fileTags'], $row['fileURL'], $row['fileTitle'], $row['fileExt'], $row['thumbnailURL']);
        } elseif ($type == "swf" && $type == $row['fileExt']) {
            buildTableRows($row['fileTags'], $row['fileURL'], $row['fileTitle'], $row['fileExt'], $row['thumbnailURL']);
        } elseif (($type == "php" || $type == "html") && $type == $row['fileExt']) {
            buildWebFileLink($row['fileURL'], $row['fileTitle'], $row['fileExt'], $row['thumbnailURL']);
        } elseif ($type == "" || $type == $row['fileExt']) {
            echo"<a href=\"../" . $row['fileURL'] . "\" >
                                ".$row['fileTitle']. "." .$row['fileExt']."
                                </a>" . "<br>";
        }
    }?>

    <!-- 
        This function prints the html markup and adds php variable and method calls
        The first td element is for words to be used as filter tags that a javascript reads to hide/unhide elements
        Only two columns are actually visible, one containing only the file name, the other containing a video player element, 
            audio player element or a thumbnail link to a flash object
    -->
    <?php function buildTableRows($tags, $link, $name, $ext, $thumb) {
        echo "<tr>
                <td hidden>
                    <p hidden>";
        echo            $tags;
        echo        "</p>
                </td>
                <td>
                    <p>";
        echo            $name;
        echo        "</p>
                </td>";
                if ($ext == "mp4") { buildVideoLink($link, $name, $ext, $thumb); }
                if ($ext == "mp3") { buildMusicLink($link, $name, $ext, $thumb); }
                if ($ext == "swf") { buildFlashLink($link, $name, $ext, $thumb); }
        echo "</tr>";
    }?>


    <!-- 
        For Shockwave Flash objects.  This generates an image link to the swf file. 
        This code generates Rows for myTable which include a hidden row for search terms, image that links to the flash object is
            taken from the thumbnailExt column of the DB table.
        These seemed like a good file type to use for auto-generated thumbnail links
    -->
    <?php function buildFlashLink($link, $name, $ext, $thumb) {
        echo "<td style=\"width:320px;\" >
                <a href=\"/" . $link . "\" >
                    <img src=\"/" . $thumb . "\"  style=\"max-height:300px;max-width:300px\" />
                </a>";
        echo "</td>";
    }?>

    <!--
        For Video files.  The test database only has mp4 video files in it
        This code generates Rows for myTable which include a hidden row for search terms, video name and poster poster image for the video element that is
            taken from the thumbnailExt column of the DB table
        The video poster image is assumed to have the exact same filename as the video file it represents, obviously with a different extension
    -->
    <?php function buildVideoLink($link, $name, $ext, $thumb) {
        echo "<td style=\"width:320px;\" >
                <video controls poster=\"/" . $thumb . "\" preload=\"none\" style=\"max-width:300px;max-height:300px\" >
                    <source src=\"/" . $link . "\" type=\"video/mp4\" >
                </video>
            </td>";
    }?>

    <!-- 
        A simple HTML img tag that is attached to a modal retrieved from W3Schools.com
        This element does not follow the table format of the videos, music and flash objects and can not current be filtered on the resulting web page
        The format presented by this is a thumbnail image (the image itself in a small box) that is loaded by the modal when clicked.
    -->
    <?php function buildImageLink($tags, $link, $name, $ext) {
        echo"<figure style=\"display:inline-block;\" >
                <img class=\"myImg\" src=\"/" . $link . "\" style=\"max-height:300px;max-width:300px\" />
                <br>
                <label>". $name . "." . $ext ."</label>
            </figure>";
    }?>

    <!-- 
        For mp3 files.  This generates an audio element to play music files found in the database
        It generates a separate audio element on the resulting page for each music file separately
        The mp3 file format was chosen because the maker had a library of them handy
    -->
    <?php function buildMusicLink($link, $name, $ext, $thumb) {
        echo "<td style=\"width:75%;\" >
                <audio controls preload=\"none\" style=\"width:70%;\" >
                    <source src=\"/" . $link. "\" type=\"audio/mpeg\">
                </audio>
            </td>";
    }?>

    <!--
        Similar to the SWF builder above, this is for Html and PHP documents 
        Each file type here has a single thumbnail image to represent them all as per the database building program
        PHP and html files are demonstrated here simply because they were available.
    -->
    <?php function buildWebFileLink($link, $name, $ext, $thumb) {
        echo "<figure style=\"display:inline-block;\" >
                <img class=\"myImg\" src=\"/" . $thumb . "\" style=\"max-height:300px;max-width:300px\" />
                <br>
                <label>". $name . "." . $ext ."</label>
            </figure>";
    }?>

    <!-- Creates and returns the MySQL connection object -->
    <?php function connectSQL($db_name) {
        $host="localhost";                  /* Your database's location here, this code was written to use a DB on the localhost */
        $user="newb";                       /* Your MySQL user name, I am the newb */
        $password="";                       /* Your MySQL local password, testing DB had no password */
        $port= 3306;                        /* Your MySQL connection port, 3306 was used for testing */
        $socket="mysql";                    /* This simply tells the system to use MySQL instead of something else */
        $conn = new mysqli($host, $user, $password, $db_name, $port, $socket);
        return $conn;
    }?>

    <!-- Closes the MySQL connection object -->
    <?php function closeSQL ($conn) {
        $conn->close();
    }?>

    <!--
    ###################################################################################################################
    #################################     End of PHP Functions, returning to HTML     #################################
    ###################################################################################################################
    -->

    <!--
        A modal from w3schools.com for displaying queried images
    -->
    <div id="myModal" class="modal">
        <img class="myImg" id="img01">
    </div>

    <!-- Just padding the bottom of the page a little -->
    <br><br><br>

    <!--
        The modal's script also from w3schools.com
    -->
    <script>
        var modal = document.getElementById("myModal");
        var i;

        var img = document.getElementsByClassName("myImg");
        var modalImg = document.getElementById("img01");

        for(i=0;i< img.length;i++) {    
            img[i].onclick = function(){

            modal.style.display = "block";
            modalImg.src = this.src;
            }
        }
        var span = document.getElementsByClassName("modal")[0];
        span.onclick = function() { 
            modal.style.display = "none";
        }
    </script>

    <!--
        Part of the "back to top" button's code. Part 1 From w3schools.com
    -->
    <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {scrollFunction()};
    </script>

    <!--
        Part of the "back to top" button's code. Part 2 From w3schools.com
    -->
    <script>
        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("linkToTop").style.display = "block";
            } 
            else {
                document.getElementById("linkToTop").style.display = "none";
            }
        }
    </script>

    <!--
        Part of the "back to top" button's code. Part 3 From w3schools.com
    -->
    <script>
        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0; // For Safari
            document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
        } 
    </script>
    
    <!--
        Script for filtering elements that have been returned by the DB query.  Videos and SWF searches are filterable by this
    -->
    <script>
		function mySearch() {
			// Declare variables
			var input, filter, table, tr, td, i, txtValue;
			input = document.getElementById("myInput");
			filter = input.value.toUpperCase();
			table = document.getElementById("myTable");
			tr = table.getElementsByTagName("tr");

			// Loop through all table rows, and hide those who don't match the search query
			for (i = 0; i < tr.length; i++) {
				td = tr[i].getElementsByTagName("td")[0];
				if (td) {
					txtValue = td.textContent || td.innerText;
					if (txtValue.toUpperCase().indexOf(filter) > -1) {
						tr[i].style.display = "";
					} else {
						tr[i].style.display = "none";
					}
				}
			}
		}
	</script>
</body> 

</html>